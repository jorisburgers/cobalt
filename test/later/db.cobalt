import nil  :: {a} [a];
import cons :: {a} a -> [a] -> [a];
import just :: {a} a -> 'Maybe a;
import none :: {a} 'Maybe a;

import hello :: 'String;

import Person :: 'String -> 'String -> 'Int -> 'Person;
import MkPersonKey :: 'Int -> 'Key 'Person;
import aPerson :: 'Person;

import PersonFirstName :: 'EntityField 'Person 'String;
import PersonLastName  :: 'EntityField 'Person 'String;
import PersonAge       :: 'EntityField 'Person 'Int;

import PersonUniqueName :: 'String -> 'String -> 'Unique 'Person;

import Task :: 'String -> 'String -> 'Task;
import MkTaskKey :: 'Int -> 'Key 'Task;
import aTask :: 'Task;

import TaskTitle :: 'EntityField 'Task 'String;
import TaskDescr :: 'EntityField 'Task 'String;

data 'Entity e;
import Entity :: {e} 'Key e -> e -> 'Entity e;

import equal      :: {e} {a} 'EntityField e a -> a -> 'Filter e;
import notEqual   :: {e} {a} 'EntityField e a -> a -> 'Filter e;
import selectList :: {e} ['Filter e] -> ['Entity e];

sl1 = selectList (cons (equal PersonFirstName hello) nil);
sl2 :: ['Entity 'Person] = selectList (cons (equal PersonFirstName hello) nil);

import get :: {key} {r} {e1} {e2}
              later "The given argument is not a key" [
                key ~ 'Key e1,
                later "Context does not expect an entity" [
                  r ~ 'Maybe e2,
                  later "The given value is not a key of the entity" [
                    e1 ~ e2 ] ] ] => key -> r;

g1 = get (MkPersonKey 1);
g2 = get 1 => fail;

import get2 :: {key} {r} {e}
               later "The given argument is not a key" [
                 key ~ 'Key e,
                 later "Context does not expect an entity" [
                   r ~ 'Maybe e ] ] => key -> r;

g1_ = get2 (MkPersonKey 1);
g2_ = get2 1 => fail;

import update_ :: {key} {val} {r} {s1}
                  later "The first argument is not a key" [
                    key ~ 'Key s1,
                    later "Key and entity types are not equal" [
                      s1 ~ val ] ] => key -> val -> 'Result;

u1 = update_ (MkPersonKey 1) aPerson;
u2 = update_ 1 aPerson => fail;
u3 = update_ (MkPersonKey 1) aTask => fail;
u4 = update_ (MkPersonKey 1) (Entity (MkPersonKey 1) aPerson) => fail;

gu1 = let lst = selectList (cons (equal PersonFirstName hello) nil)
       in match lst with 'List
          | cons e es -> match e with 'Entity
                         | Entity k v -> update_ k v;
gu2 = let lst = selectList (cons (equal PersonFirstName hello) nil)
       in match lst with 'List
          | cons e es -> match e with 'Entity
                         | Entity k v -> update_ k e => fail;
