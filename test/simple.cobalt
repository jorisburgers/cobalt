rule three_is_integer
match  int 3
script #this ~ 'Int "3 is a number";

import example :: 'Int -> 'Bool;

rule   example_rule
match  app (var "example") #thing
script asym (#thing ~ 'Int "argument must be an Int")
            #thing;

f x y = x y (example 3);

g = z w => fail;

h x = 3 x => fail;


import singleton :: {a} a -> [a];

rule strict singleton_on_eq
match  app #singl@(var "singleton") #thing
check  $Eq #thing
script merge [ #this ~ [#thing] "singleton on Eq"
             , #thing
             , #singl ];

axiom $Eq 'Int;

u = singleton 3;
v :: {a} $Eq a => a -> [a] = \x -> singleton x;
w = singleton 3 4;


import noRule :: 'Bool -> 'Int;

rule  make_rule
match app #fn@(var "noRule") #arg
script merge "The error is here!"
             [ #fn, #arg, #this ~ 'Int, #arg ~ 'Bool];

z = noRule 3;