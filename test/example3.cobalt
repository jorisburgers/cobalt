data 'Monad m;
data 'List a;

data 'Term v;
data 'Incr v;

import return :: {m} {r > {a} a -> 'App m a} 'Monad m -> r;
import bind   :: {m} {r > {a} {b} {t = a -> 'App m b} 'App m a -> t -> 'App m b} 'Monad m -> r;

import nil  :: {a} [a];
import cons :: {a} a -> [a] -> [a];

import fix :: {a} {x = a -> a} x -> a;

import Var :: {v} v -> 'Term v;
import App :: {v} 'Term v -> 'Term v -> 'Term v;
import Lam :: {v} 'Term ('Incr v) -> 'Term v;
import Zero :: {v} 'Incr v;
import Succ :: {v} v -> 'Incr v;

mapM = fix (\g -> \m -> \f -> \xs ->
  match xs with 'List
  | nil -> return m nil
  | cons y ys -> bind m (f y) (\z -> bind m (g m f ys) (\zs -> return m (cons z zs)))) => ok;

mapI = \f -> \i -> match i with 'Incr
                   | Zero -> Zero
                   | Succ x -> Succ (f x) => ok;

fixMT :: {s > {a} {b} {f = a -> b} f -> 'Term a -> 'Term b}
         {g = s -> s} g -> s = fix => ok;

fixMT2 :: {r > {a} {b} {f = a -> b} f -> 'Term a -> 'Term b}
          {s > {a} {b} {f = a -> b} f -> 'Term a -> 'Term b}
          {t > {a} {b} {f = a -> b} f -> 'Term a -> 'Term b}
          {g = r -> s} g -> t = fix => ok;

mapT :: {a} {b} {s = a -> b} s -> 'Term a -> 'Term b
  = fix (\mt -> \f -> \t -> match t with 'Term
                            | Var x -> Var (f x)
                            | App t1 t2 -> App (mt f t1) (mt f t2)
                            | Lam t -> Lam (mt (mapI f) t)) => ok;