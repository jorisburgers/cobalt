import nil    :: {a} [a];
import cons   :: {a} a -> [a] -> [a];

import tuple  :: {a} {b} a -> b -> (a,b);
import fst    :: {a} {b} (a,b) -> a;
import snd    :: {a} {b} (a,b) -> b;

import triple :: {a} {b} {c} a -> b -> c -> 'Triple a b c;
import triplx :: {a} {b} {c} b = {x} x => a -> b -> c -> 'Triple a b c;
import tripla :: {a} {b} {c} b > {x} x -> x => a -> b -> c -> 'Triple a b c;

import f      :: {b} {s} s = {a} [a] -> b => s -> 'Bool -> b;
import id     :: {a} a -> a;
import length :: {a} [a] -> 'Int;

import str    :: ['Char];
import ids    :: {a} a > {b} b -> b => [a];

instErr1 = cons 3 2 => fail;
idRoundtrip x = fst (tuple x 3);
instType1 x y = triple x y 3;
instType2 x = \(y :: {b} b) -> triplx x y 3;
instType3Err x = \(y :: {b} b -> b) -> triplx x y 3 => fail;
instType4Err x = \(y :: 'Int) -> triplx x y 3 => fail;
instType5 x = \(y :: {b} b -> b) -> tripla x y 3;
instType6Err x = \(y :: 'Int) -> tripla x y 3 => fail;
instType7 x = \(y :: {b} 'Int -> b) -> tripla x y 3;

otherExample1      = f length;
otherExample2Ambig = f id => fail;

l1 = length str;
l2 = length ids;
