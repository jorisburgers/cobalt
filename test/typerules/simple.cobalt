rule three_is_integer
case 3 {
  #this ~ 'Int error { "3 is a number" }
};

import example :: 'Int -> 'Bool;

rule example_unsound_rule
case example #thing {
  constraints #thing,
  #thing ~ 'Int error { "argument must be an Int" }
};

f x y = x y (example 3);

g = z w => fail;

h x = 3 x => fail;


import singleton :: {a} a -> [a];

rule strict singleton_on_eq
case #singl@(singleton) #thing
when $Eq #thing {
  join {
    #this ~ [#thing],
    constraints #thing,
   constraints #singl
  }
};

axiom $Eq 'Int;

u = singleton 3;
v :: {a} $Eq a => a -> [a] = \x -> singleton x;
w = singleton 3 4 => fail;
import aNonEq :: 'NonEqThingy;
t = singleton aNonEq;


import noRule :: 'Bool -> 'Int;

rule make_rule
case #fn@(noRule) #arg {
  join {
    constraints #fn,
    constraints #arg,
    #this ~ 'Int,
    #arg ~ 'Bool
  } error { "The error is here!" }
};

z = noRule 3 => fail;


import map :: {a} {b} (a -> b) -> [a] -> [b];

rule map
case #intermediate@(#map@(map) #fn) #list {
  fresh #e #x #r,
  join {
    constraints #map,
    constraints #fn,
    constraints #list
  },
  #list ~ [#e]   error { "Second argument to map must be a list" },
  #fn ~ #x -> #r error { "First argument to map must be a function" },
  #x ~ #e        error { "The function does not have the correct domain" },
  join {
    #intermediate ~ [#e] -> [#r],
    #this ~ [#r]
  }
};

import listOfInt  :: ['Int];
import fnOfInt    :: 'Int -> 'IntResult;
import listOfBool :: ['Bool];
import fnOfBool   :: 'Bool -> 'BoolResult;

example1 = map fnOfBool listOfInt => fail;


import by :: {a} $Fractional a => a -> a -> a;
axiom $Fractional 'Float;
axiom $Integral   'Int;

rule divide_integers
case by #n #m
when $Integral #n, $Integral #m {
  repair { "Use `div' or `quot' to divide integers" }
};

by1 = by 3 2 => fail;
