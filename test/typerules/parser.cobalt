import dullar :: {a} {b} {s} (a -> b) -> 'Parser s a -> 'Parser s b;
import star   :: {a} {b} {s} 'Parser s (a -> b) -> 'Parser s a -> 'Parser s b;

rule app_parser
case #first@(#dollar@(dullar) #fn) #arg {
  fresh #a1 #a2 #b1 #b2 #s1 #s2,
  join {
    #dollar ~ (#a1 -> #b1) -> 'Parser #s1 #a1 -> 'Parser #s1 #b1,
    #first  ~ 'Parser #s1 #a1 -> 'Parser #s1 #b1
  },
  constraints #fn,
  #fn ~ #a1 -> #b1        error { "Left operand is not a function" },
  constraints #arg,
  #arg ~ 'Parser #s1 #a2  error { "Right operand is not a parser" },
  #this ~ 'Parser #s2 #b2 error { "Context does not accept a parser" },
  #b1 ~ #b2               error { "Parser has an incorrect result type" },
  #a1 ~ #a2               error { "Function cannot be applied to parser's result" },
  #s1 ~ #s2               error { "Parser has an incorrect symbol type" }
};

import mapToUpper :: [a] -> [a];
import helloWorld :: 'String;
import definitelyNotAFunction :: 'Bool;

import parser1 :: 'Parser 'String ['Int];
import parser2 :: 'Parser 'String 'Bool;

test1 = dullar mapToUpper helloWorld => fail;
test2 = dullar definitelyNotAFunction parser1 => fail;
test3 = dullar definitelyNotAFunction helloWorld => fail;
test4 = dullar mapToUpper parser1;
test5 = dullar mapToUpper parser2 => fail;


rule unsafe mega_app_parser
case #oOne@(#oStar@(star)
           [ #firstTwo@(#firstOne@(#dullar@(dullar) #fn) #x)
           | #two@(#one@(#star@(star) &k) #y)]*k) #z {
  fresh #str #end,

  constraints #fn,
  sequence {
    #fn ~ rec #visitor <- #this {
      match #visitor {
        case star #i any {
          fresh #m #n,
          #n ~ call #i,
          returning #m -> #n
        },
        case dullar any any {
          fresh #f1 #f2,
          returning #f1 -> #f2
        }
      }
    }
  } error { "Function does not take enough arguments" },
  join {
    foreach #i <- inout #x ++ inout #y ++ inout #z {
      ordered {
        constraints #i,
        #i > {s} {a} 'Parser s a error { "Argument is not a parser" }
      }
    }
  },
  join {
    foreach #i <- inout #x ++ inout #y ++ inout #z {
      #i > {a} 'Parser #str a
    }
  } error { "Not all parsers consume the same type" },

  #end ~ rec #visitor <- #this {
    match #visitor {
      case #a@(#d@(dullar) #fn) #arg {
        fresh #r1 #r2,
        #fn ~ #r1 -> #r2,
        #arg ~ 'Parser #str #r1 error { "Parser does not produce the correct type" },
        join {
          #d ~ (#r1 -> #r2) -> 'Parser #str #r1 -> 'Parser #str #r2,
          #a ~ 'Parser #str #r1 -> 'Parser #str #r2
        },
        returning #r2
      },
      case #a@(#s@(star) #rest) #arg {
        fresh #r #r1 #r2,
        #r ~ call #rest,
        #r ~ #r1 -> #r2,
        #arg ~ 'Parser #str #r1 error { "Parser does not produce the correct type" },
        join {
          #s    ~ 'Parser #str #r -> 'Parser #str #r1 -> 'Parser #str #r2,
          #rest ~ 'Parser #str #r,
          #a    ~ 'Parser #str #r1 -> 'Parser #str #r2
        },
        returning #r2
      }
    }
  },
  #this ~ 'Parser #str #end
};

import twoArgFn   :: ['Int] -> 'Bool -> 'Result;
import threeArgFn :: ['Int] -> 'Bool -> 'Bool -> 'Result;

testA = star (dullar twoArgFn parser1) parser2;
testB = star (dullar twoArgFn parser1) parser1 => fail;
testC = star (dullar twoArgFn parser2) parser1 => fail;
testD = star (star (dullar twoArgFn   parser2) parser1) parser1 => fail;
testE = star (star (dullar threeArgFn parser1) parser2) parser1 => fail;
testF = star (dullar twoArgFn 1) parser2 => fail;
testG = star (star (dullar threeArgFn parser1) parser1) parser1 => fail;
