import dullar :: {a} {b} {s} (a -> b) -> 'Parser s a -> 'Parser s b;
import star   :: {a} {b} {s} 'Parser s (a -> b) -> 'Parser s a -> 'Parser s b;

rule   app_parser
match  #first@(#dollar@(dullar) #fn) #arg
script fresh #a1 #a2 #b1 #b2 #s1 #s2,
       join {
         #dollar ~ (#a1 -> #b1) -> 'Parser #s1 #a1 -> 'Parser #s1 #b1,
         #first  ~ 'Parser #s1 #a1 -> 'Parser #s1 #b1
       },
       constraints #fn,
       #fn ~ #a1 -> #b1        error { "Left operand is not a function" },
       constraints #arg,
       #arg ~ 'Parser #s1 #a2  error { "Right operand is not a parser" },
       #this ~ 'Parser #s2 #b2 error { "Context does not accept a parser" },
       #b1 ~ #b2               error { "Parser has an incorrect result type" },
       #a1 ~ #a2               error { "Function cannot be applied to parser's result" },
       #s1 ~ #s2               error { "Parser has an incorrect symbol type" };

import mapToUpper :: [a] -> [a];
import helloWorld :: 'String;
import definitelyNotAFunction :: 'Bool;

import parser1 :: 'Parser 'String ['Int];
import parser2 :: 'Parser 'String 'Bool;

test1 = dullar mapToUpper helloWorld => fail;
test2 = dullar definitelyNotAFunction parser1 => fail;
test3 = dullar definitelyNotAFunction helloWorld => fail;
test4 = dullar mapToUpper parser1;
test5 = dullar mapToUpper parser2 => fail;


rule unsafe mega_app_parser
match  #oOne@(#oStar@(star)
              [ #firstTwo@(#firstOne@(#dullar@(dullar) #fn) #x)
              | #two@(#one@(#star@(star) &k) #y)]*k)
             #z
script fresh #fnTy #fn1 #fn2 #fnEnd #str #rTy #r1 #r2 #rE1 #rE2,

       constraints #fn,

       update #fnTy <- #fn1 -> #fn2,
       foreach #i <- inout #y {
         fresh #fnI,
         update #fnTy <- #fnI -> #fnTy
       },
       update #fnTy <- #fnEnd -> #fnTy,

       join {
         ordered {
           constraints #x,
           #x > {s} {a} 'Parser s a error { "First argument is not a parser" }
         },
         foreach #i <- inout #y {
           ordered {
             constraints #i,
             #i > {s} {a} 'Parser s a error { "Argument is not a parser" }
           }
         },
         ordered {
           constraints #z,
           #z > {s} {a} 'Parser s a error { "Last argument is not a parser" }
         }
       },

       join {
         #x > {a} 'Parser #str a,
         foreach #i <- inout #y { #i > {a} 'Parser #str a },
         #z > {a} 'Parser #str a
       } error { "Not all parsers consume the same type" },

       #fn ~ #r1 -> #r2,
       #x ~ 'Parser #str #r1 error { "First parser does not produce the correct type" },
       join {
         #dullar   ~ (#r1 -> #r2) -> 'Parser #str #r1 -> 'Parser #str #r2,
         #firstOne ~ 'Parser #str #r1 -> 'Parser #str #r2,
         #firstTwo ~ 'Parser #str #r2
       },

       update #rTy <- #r2,
       foreach #i <- inout #y | #s <- inout #star | #o <- inout #one | #t <- inout #two {
         fresh #rI1 #rI2,
         #rTy ~ #rI1 -> #rI2,
         #i ~ 'Parser #str #rI1 error { "Parser does not produce the correct type" },
         join {
           #s ~ 'Parser #str (#rI1 -> #rI2) -> 'Parser #str #rI1 -> 'Parser #str #rI2,
           #o ~ 'Parser #str #rI1 -> 'Parser #str #rI2,
           #t ~ 'Parser #str #rI2
         }
       },

       #rTy ~ #rE1 -> #rE2,
       #z ~ 'Parser #str #rE1 error { "Last parser does not produce the correct type" },
       join {
         #oStar ~ 'Parser #str (#rE1 -> #rE2) -> 'Parser #str #rE1 -> 'Parser #str #rE2,
         #oOne  ~ 'Parser #str #rE1 -> 'Parser #str #rE2,
         #this  ~ 'Parser #str #rE2
       };

import twoArgFn   :: ['Int] -> 'Bool -> 'Result;
import threeArgFn :: ['Int] -> 'Bool -> 'Bool -> 'Result;

testA = star (dullar twoArgFn parser1) parser2;
testB = star (dullar twoArgFn parser1) parser1 => fail;
testC = star (dullar twoArgFn parser2) parser1 => fail;
testD = star (star (dullar twoArgFn   parser2) parser1) parser1 => fail;
testE = star (star (dullar threeArgFn parser1) parser2) parser1 => fail;
testF = star (dullar twoArgFn 1) parser2 => fail;
testG = star (star (dullar threeArgFn parser1) parser1) parser1 => fail;
