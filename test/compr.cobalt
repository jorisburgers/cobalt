import map :: {m} {a} {b} $Functor m => (a -> b) -> 'App m a -> 'App m b;

axiom $Functor 'List;
axiom $Functor 'Maybe;

import plusThree :: 'Int -> 'Int;
import listOfInts :: 'App 'List 'Int;

f = map plusThree;
g = map plusThree listOfInts;

import map2 :: {m} {a} {b} $Functor m => (a -> b) -> 'App m a -> 'App m b;

rule map2_on_lists
match  app #app1@(app #map2@(var "map2") #fn) #arg
check  #arg > {a} 'App 'List a
script asym (merge [ a1 ~ a2, a2 ~ a3, b1 ~ b2, b ~ b2])
       asym #this ~ 'App 'List b
       asym "Parameters must coincide"
            a3 ~ a4
       asym "First argument should be a function"
            #fn ~ a4 -> b
       asym #fn
       asym "Second should be a list"
            (#arg ~ 'App 'List a3)
       asym #arg
       merge [ #map2 ~ (a2 -> b2) -> 'App 'List a2 -> 'App 'List b2
             , #app1 ~ 'App 'List a1 -> 'App 'List b1 ];

import maybeOfInts :: 'App 'Maybe 'Int;
import listOfBool :: 'App 'List 'Bool;

test0 = map2 plusThree;
test1 = map2 plusThree listOfInts;
test2 = map2 plusThree listOfBool => fail;
test3 = map2 plusThree maybeOfInts;


import map3 :: {m} {a} {b} $Functor m => (a -> b) -> 'App m a -> 'App m b;

rule   map3_on_lists
match  app #appfn@(app #map@(var "map3") #fn) #arg
check  #arg > {a} 'App 'List a
script asym (merge [ #this ~ 'App 'List r, #appfn ~ 'App 'List e1 -> 'App 'List r, #map ])
       asym "Argument type must be the list type"
            e1 ~ e2
       asym "First argument should be a function"
            #fn ~ e2 -> r
       merge [ #fn, #arg, #arg ~ 'App 'List e1 ];

test0_ = map3 plusThree;
test1_ = map3 plusThree listOfInts;
test2_ = map3 plusThree listOfBool => fail;
test3_ = map3 plusThree maybeOfInts;


import bind   :: {m} {a} {b} $Monad m => 'App m a -> (a -> 'App m b) -> 'App m b;
import return :: {a} {a} $Monad m => a -> 'App m a;

axiom $Monad 'List;
axiom $Monad 'Maybe;

import aListOfInts :: 'App 'List 'Int;
import sum :: 'Int -> 'Int -> 'Int;

bind1 = bind aListOfInts (\x -> bind aListOfInts (\y -> return (sum x y)));
bind2 = bind aListOfInts (\x -> bind 3 (\y -> return (sum x y)));
