import nil  :: {a} [a];
import cons :: {a} a -> [a] -> [a];
import just :: {a} a -> 'Maybe a;
import none :: {a} 'Maybe a;

import hello :: 'String;

import Person :: 'String -> 'String -> 'Int -> 'Person;
import MkPersonKey :: 'Int -> 'Key 'Person;
import aPerson :: 'Person;

import PersonFirstName :: 'EntityField 'Person 'String;
import PersonLastName  :: 'EntityField 'Person 'String;
import PersonAge       :: 'EntityField 'Person 'Int;

import PersonUniqueName :: 'String -> 'String -> 'Unique 'Person;

import Task :: 'String -> 'String -> 'Task;
import MkTaskKey :: 'Int -> 'Key 'Task;
import aTask :: 'Task;

import TaskTitle :: 'EntityField 'Task 'String;
import TaskDescr :: 'EntityField 'Task 'String;

data 'Entity e;
import Entity :: {e} 'Key e -> e -> 'Entity e;

import equal      :: {e} {a} 'EntityField e a -> a -> 'Filter e;
import notEqual   :: {e} {a} 'EntityField e a -> a -> 'Filter e;
import selectList :: {e} ['Filter e] -> ['Entity e];

sl1 = selectList (cons (equal PersonFirstName hello) nil);
sl2 :: ['Entity 'Person] = selectList (cons (equal PersonFirstName hello) nil);

import get :: {e} 'Key e -> 'Maybe e;

rule   get
match  app #get@(var "get") #key
script      (merge [ #get ~ 'Key e1 -> 'Maybe e2, #key ])
       asym "The given argument is not a key"
            #key ~ 'Key e1
       asym "Context does not expect an entity"
            #this ~ 'Maybe e2
       asym "The given value is not a key of the corresponding entity"
            e1 ~ e2;

g1 = get (MkPersonKey 1);
g2 = get 1 => fail;

import get2 :: {e} 'Key e -> 'Maybe e;

rule   get2
match  app #get@(var "get2") #key
script      #key
       asym "The given argument is not a key"
            (#key ~ 'Key e)
       asym (merge [ #get, #this ~ 'Maybe e ]);

g1_ = get2 (MkPersonKey 1);
g2_ = get2 1 => fail;

import update :: {e} 'Key e -> e -> 'Result;

rule   updateEntity
match  app #first@(app #upd@(var "update") #key) #val
check  #val > {a} 'Entity a
script _|_ "You should provide a raw value, not an entity,";

rule   update
match  app #first@(app #upd@(var "update") #key) #val
script      (merge [ #key, #val ])
       asym "The first argument is not a key"
            #key ~ 'Key s1
       asym "Key and entity types are not equal"
            s1 ~ #val "key and entity types must coincide"
       asym (merge [ #upd, #first ~ #val -> 'Result, #this ~ 'Result ]);

u1 = update (MkPersonKey 1) aPerson;
u2 = update 1 aPerson => fail;
u3 = update (MkPersonKey 1) aTask => fail;
u4 = update (MkPersonKey 1) (Entity (MkPersonKey 1) aPerson) => fail;

gu1 = let lst = selectList (cons (equal PersonFirstName hello) nil)
       in match lst with 'List
          | cons e es -> match e with 'Entity
                         | Entity k v -> update k v;
gu2 = let lst = selectList (cons (equal PersonFirstName hello) nil)
       in match lst with 'List
          | cons e es -> match e with 'Entity
                         | Entity k v -> update k e => fail;
